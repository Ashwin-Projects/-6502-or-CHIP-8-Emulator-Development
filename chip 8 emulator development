# CHIP-8 Emulator Development
import random
class Chip8:
    def _init_(self):
        self.memory = [0] * 4096
        self.V = [0] * 16  # Registers V0 to VF
        self.I = 0         # Index register
        self.pc = 0x200    # Program counter starts at 0x200
        self.stack = []
        self.delay_timer = 0
        self.sound_timer = 0
    def load_program(self, program):
        for i in range(len(program)):
            self.memory[0x200 + i] = program[i]
    def fetch(self):
        opcode = (self.memory[self.pc] << 8) | self.memory[self.pc + 1]
        self.pc += 2
        return opcode
    def execute_instruction(self, opcode):
        if opcode & 0xF000 == 0x6000:  # LD Vx, byte
            x = (opcode & 0x0F00) >> 8
            byte = opcode & 0x00FF
            self.V[x] = byte
    def run(self):
        while True:
            opcode = self.fetch()
            self.execute_instruction(opcode)
chip8 = Chip8()
chip8.run()
