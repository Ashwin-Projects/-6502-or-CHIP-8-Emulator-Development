import discord
from discord.ext import commands, tasks
import os
import asyncio
import datetime
import random
import requests
from dotenv import load_dotenv
load_dotenv()
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)
polls = {}
reminders = {}
music_queue = []
async def get_ai_response(prompt):
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {GEMINI_API_KEY}"
    }
    data = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as response:
            if response.status == 200:
                result = await response.json()
                return result['candidates'][0]['content']['parts'][0]['text']
            else:
                return "Sorry, I couldn't process that request."

@bot.event
async def on_ready():
    print(f'{bot.user} has connected to Discord!')
    check_reminders.start()
@bot.event
async def on_member_join(member):
    channel = member.guild.system_channel
    if channel is not None:
        await channel.send(f'Welcome {member.mention} to the server! Enjoy your stay!')
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if bot.user.mentioned_in(message):
        response = await get_ai_response(message.content)
        await message.channel.send(response)
    await bot.process_commands(message)
@bot.command(name='poll')
async def create_poll(ctx, question, *options):
    if len(options) < 2:
        await ctx.send("You need at least two options for a poll.")
        return
    poll_id = len(polls) + 1
    polls[poll_id] = {'question': question, 'options': options, 'votes': {opt: 0 for opt in options}}
    poll_message = f"Poll: {question}\n\n"
    for i, option in enumerate(options, 1):
        poll_message += f"{i}. {option}\n"
    poll_message += "\nReact with the corresponding number to vote!"
    sent_message = await ctx.send(poll_message)
    for i in range(len(options)):
        await sent_message.add_reaction(f"{i+1}\N{COMBINING ENCLOSING KEYCAP}")
@bot.command(name='remind')
async def set_reminder(ctx, time, *, message):
    try:
        when = datetime.datetime.now() + datetime.timedelta(minutes=int(time))
        reminders[ctx.author.id] = {'time': when, 'message': message}
        await ctx.send(f"I'll remind you about '{message}' in {time} minutes.")
    except ValueError:
        await ctx.send("Please use a number for the time in minutes.")
@tasks.loop(minutes=1)
async def check_reminders():
    now = datetime.datetime.now()
    to_remove = []
    for user_id, reminder in reminders.items():
        if now >= reminder['time']:
            user = await bot.fetch_user(user_id)
            await user.send(f"Reminder: {reminder['message']}")
            to_remove.append(user_id)
    for user_id in to_remove:
        del reminders[user_id]
@bot.command(name='summarize')
async def summarize(ctx, *, text):
    summary = await get_ai_response(f"Summarize the following text: {text}")
    await ctx.send(f"Summary: {summary}")
@bot.command(name='play')
async def play(ctx, *, song):
    music_queue.append(song)
    await ctx.send(f"Added '{song}' to the music queue.")
@bot.command(name='queue')
async def show_queue(ctx):
    if not music_queue:
        await ctx.send("The music queue is empty.")
    else:
        queue_list = "\n".join([f"{i+1}. {song}" for i, song in enumerate(music_queue)])
        await ctx.send(f"Current music queue:\n{queue_list}")
@bot.command(name='skip')
async def skip_song(ctx):
    if music_queue:
        skipped_song = music_queue.pop(0)
        await ctx.send(f"Skipped '{skipped_song}'.")
        if music_queue:
            await ctx.send(f"Now playing: {music_queue[0]}")
    else:
        await ctx.send("The music queue is empty.")
bot.run(DISCORD_TOKEN)
